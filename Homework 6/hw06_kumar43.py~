#! /usr/bin/env python

from BitVector import *

filein = raw_input("Enter input file: ")
fileout = raw_input("Enter output file: ")
mode = raw_input("Encrypt (1) or Decrypt (2): ")

mode = int(mode)

if mode not in [1,2]:
	
	print "Error incorrect mode selected"
	quit()


pcheck = 0
qcheck = 0

ev = BitVector( intVal = 65537 )
pv = BitVector( intVal = 0 )
qv = BitVector( intVal = 0 )
n_found = 0

while( n_found == 0 ):

	if pcheck == 0:
		pv = pv.gen_rand_bits_for_prime(128)
		pcheck = pv.test_for_primality()

	if qcheck == 0:
		qv = qv.gen_rand_bits_for_prime(128)
		qcheck = qv.test_for_primality()

	if (pcheck != 0) and (qcheck != 0):
		n = pv.gf_multiply(qv)
		
		if int(n.gcd(ev)) != 1:
			
			pcheck = 0
			qcheck = 0
			n_found = 0

		else:

			n_found = 1
			
			print "P: " + str(int(pv))
			print "Q: " + str(int(qv))
			print "N: " + str(int(n))

d = BitVector( size = 0 )

d = ev.multiplicative_inverse(n)


in_bv = BitVector(filename = filein)
zero_bv = BitVector( intVal = 0, size = 128 )
mbv = BitVector(size = 0)
fhdout = open(fileout, 'wb')
mbv_final = BitVector( size = 0 )

n_temp = raw_input("reenter n: ")
n = BitVector( intVal = int(n_temp), size = 256)

if mode == 1:
	while(in_bv.more_to_read):
	
		temp = in_bv.read_bits_from_file( 128 )
		if len(temp) > 0:
		
			if len(temp) < 128:
			
				missingZ = 128 - len(temp)

				filler = BitVector( intVal = 0, size = missingZ )

				mbv = zero_bv + filler + temp
	
			else:
			
				mbv = zero_bv + temp



	
			c = pow(int(mbv), int(ev), int(n))
			cbv = BitVector( intVal = c, size = 256)

			cbv.write_to_file( fhdout )
else:

	while(in_bv.more_to_read):
		
		temp = in_bv.read_bits_from_file( 128 )
		
		m = pow(int(temp),int(d), int(n))
		mbv = BitVector( intVal = m, size = 256 )
		mbv_final = mbv[127:255]

		mbv.write_to_file( fhdout )






	
